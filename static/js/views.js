// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.FinderView = Backbone.View.extend({
    el: "#finder",
    events: {
      "keyup #thebox": "search",
      "click .create-group": "createGroup"
    },
    initialize: function() {
      return this.render();
    },
    render: function() {
      return this.$el.html(Handlebars.templates.finder());
    },
    showGroups: function(models) {
      return this.$("#results").html(Handlebars.templates.foobar({
        groups: models
      }));
    },
    createGroup: function(e) {
      var group, name;
      name = $(e.target).data("name");
      group = new Group({
        name: name
      });
      groups.add(group);
      return group.save();
    },
    search: function(e) {
      var fragment, matches;
      fragment = this.$("#thebox").val();
      if (fragment) {
        matches = groups.filter(function(group) {
          return ~group.get('name').indexOf(fragment);
        });
        if (matches.length > 0) {
          return this.showGroups(matches);
        } else {
          return this.$("#results").html(Handlebars.templates.no_groups({
            name: fragment
          }));
        }
      } else {
        return this.$("#results").html("Start typing <3");
      }
    }
  });

  window.GroupView = Backbone.View.extend({
    el: "#group",
    colors: {},
    events: {
      "keyup #chat-input": "addMessage"
    },
    initialize: function() {
      var _this = this;
      this.render();
      return this.model.on("change:messages", function() {
        return _this.render();
      });
    },
    render: function() {
      this.$el.html(Handlebars.templates.group(this.colorize(this.model.toJSON())));
      return this.$("#messages").scrollTop(this.$("#messages").prop("scrollHeight"));
    },
    colorize: function(group) {
      var colorized,
        _this = this;
      colorized = [];
      _.each(group.messages, function(message) {
        if (_.has(_this.colors, message.username)) {
          message.color = _this.colors[message.username];
        } else {
          _this.colors[message.username] = "#" + ((1 << 24) * Math.random() | 0).toString(16);
          message.color = _this.colors[message.username];
        }
        return colorized.push(message);
      });
      group.messages = colorized;
      return group;
    },
    addMessage: function(e) {
      var message;
      if (e.keyCode === 13) {
        message = this.$(e.target).val();
        console.log(message);
        return socket.emit("group:message", this.model.id, message, function(err, res) {
          if (err) {
            alert("FUCK FUCK SOMETHING BROKE OH SHIT");
            return this.$el.html(Handlebars.templates.group(this.model.toJSON()));
          }
        });
      }
    }
  });

  window.AppView = Backbone.View.extend({
    el: "body",
    username: null,
    events: {
      "click a[data-route]": "routeInternal"
    },
    initialize: function() {
      var _this = this;
      this.updateGroupList();
      groups.on("add remove", this.updateGroupList, this);
      return socket.on("online", function(people) {
        return _this.updatePersonList(people);
      });
    },
    routeInternal: function(e) {
      var href, protocol, target;
      target = $(e.target);
      href = target.attr("href");
      protocol = window.location.protocol + "//";
      if (href && href[{
        0: protocol.length
      }] !== protocol && __indexOf.call(href, "javascript:") < 0) {
        e.preventDefault();
        return router.navigate(href, true);
      }
    },
    updateGroupList: function() {
      return this.$("#groups").html(Handlebars.templates.sidebar_groups({
        groups: groups.toJSON()
      }));
    },
    updatePersonList: function(people) {
      return this.$("#people").html(Handlebars.templates.sidebar_people({
        people: people
      }));
    }
  });

}).call(this);
